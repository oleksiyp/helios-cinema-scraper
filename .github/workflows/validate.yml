name: Validate Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install homeassistant
    
    - name: Validate Python syntax
      run: |
        python -m py_compile custom_components/helios_cinema/__init__.py
        python -m py_compile custom_components/helios_cinema/sensor.py
    
    - name: Validate HACS structure
      run: |
        python -c "
        import json
        import os
        
        # Check required files
        required_files = [
            'hacs.json',
            'custom_components/helios_cinema/manifest.json',
            'custom_components/helios_cinema/__init__.py',
            'custom_components/helios_cinema/sensor.py'
        ]
        
        missing = [f for f in required_files if not os.path.exists(f)]
        if missing:
            print('Missing required files:', missing)
            exit(1)
        
        # Validate hacs.json
        with open('hacs.json') as f:
            hacs_config = json.load(f)
            if 'name' not in hacs_config:
                print('Missing name in hacs.json')
                exit(1)
        
        # Validate manifest.json
        with open('custom_components/helios_cinema/manifest.json') as f:
            manifest = json.load(f)
            required_keys = ['domain', 'name', 'version', 'requirements']
            missing = [k for k in required_keys if k not in manifest]
            if missing:
                print('Missing manifest keys:', missing)
                exit(1)
        
        print('HACS validation passed!')
        "
    
    - name: Test scraper functionality
      run: |
        python -c "
        import sys
        sys.path.append('custom_components')
        from helios_cinema.sensor import HeliosCinemaSensor
        import asyncio
        import aiohttp
        
        async def test():
            async with aiohttp.ClientSession() as session:
                sensor = HeliosCinemaSensor(
                    'https://helios.pl/wroclaw/kino-helios-magnolia',
                    'Test Cinema',
                    60
                )
                sensor._session = session
                try:
                    await sensor.async_update()
                    print(f'Successfully scraped {len(sensor._films)} films')
                    return len(sensor._films) > 0
                except Exception as e:
                    print(f'Scraper test failed: {e}')
                    return False
        
        result = asyncio.run(test())
        if not result:
            print('Scraper test failed')
            exit(1)
        "
